{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","dummy","useRef","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setformValue","sendMessage","e","a","preventDefault","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","message","id","ref","onSubmit","value","onChange","target","type","props","messageClass","className","src","App","useAuthState","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRASAA,IAASC,cAAe,CACtBC,OAAQ,0CACRC,WAAY,iCACZC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIjB,IAAMC,EAAOT,IAASS,OAChBC,EAAYV,IAASU,YAiB3B,SAASC,IAKP,OACE,wBAAQC,QALe,WACvB,IAAMC,EAAW,IAAIb,IAASS,KAAKK,mBACnCL,EAAKM,gBAAgBF,IAGrB,iCAGJ,SAASG,IACP,OAAOP,EAAKQ,aACV,wBAAQL,QAAW,kBAAMH,EAAKS,WAA9B,sBAGJ,SAASC,IACP,IAAMC,EAAQC,mBACRC,EAAcZ,EAAUa,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAAaC,MAAM,IAHpC,EAIEC,YAAkBH,EAAO,CAACI,QAAQ,OAA9CC,EAJU,sBAKiBC,mBAAS,IAL1B,mBAKVC,EALU,KAKCC,EALD,KAMXC,EAAW,uCAAG,WAAMC,GAAN,mBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAEM3B,EAAKQ,YAAtBoB,EAFW,EAEXA,IAAKC,EAFM,EAENA,SAFM,SAGZhB,EAAYiB,IAAI,CACpBC,KAAMT,EACNU,UAAWzC,IAASU,UAAUgC,WAAWC,kBACzCN,MACAC,aAPgB,OASlBN,EAAa,IACbZ,EAAMwB,QAAQC,eAAe,CAACC,SAAS,WAVrB,2CAAH,sDAYjB,OACE,gCACGjB,GAAYA,EAASkB,KAAI,SAAAC,GAAG,OAAI,cAACC,EAAD,CAA0BC,QAAUF,GAAlBA,EAAIG,OACvD,qBAAKC,IAAKhC,IACV,uBAAMiC,SAAUpB,EAAhB,UACE,uBAAOqB,MAAOvB,EAAWwB,SAAY,SAACrB,GAAD,OAAOF,EAAaE,EAAEsB,OAAOF,UAClE,wBAAQG,KAAO,SAAf,wBAOR,SAASR,EAAYS,GAAO,IAAD,EACKA,EAAMR,QAA7BV,EADkB,EAClBA,KAAMH,EADY,EACZA,IAAKC,EADO,EACPA,SACZqB,EAAetB,IAAQ5B,EAAKQ,YAAYoB,IAAM,OAAS,WAC7D,OACE,sBAAKuB,UAAS,kBAAeD,GAA7B,UACE,qBAAKE,IAAOvB,IACd,4BAAIE,OAIOsB,MArEf,WAAgB,IAAD,EACEC,YAAatD,GAArBuD,EADM,oBAEb,OACE,sBAAKJ,UAAU,MAAf,UACE,iCACE,6BAAI,cAAC5C,EAAD,QAEJ,kCACGgD,EAAO,cAAC7C,EAAD,IAAgB,cAACR,EAAD,UCpBnBsD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.201d1e1a.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css';\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/auth'\nimport {useState,useRef} from 'react'\nimport { useAuthState } from 'react-firebase-hooks/auth'\nimport { useCollection, useCollectionData } from 'react-firebase-hooks/firestore' \n\nfirebase.initializeApp ({\n  apiKey: \"AIzaSyAGBegihbcW-4onVY8GrWqSpiE_Of_rAQA\",\n  authDomain: \"chat-app-e0702.firebaseapp.com\",\n  projectId: \"chat-app-e0702\",\n  storageBucket: \"chat-app-e0702.appspot.com\",\n  messagingSenderId: \"234345712159\",\n  appId: \"1:234345712159:web:409264f5d1237e9f23e32a\",\n  measurementId: \"G-81MX26HGFT\"\n\n})\n\nconst auth = firebase.auth()\nconst firestore = firebase.firestore()\n\n\nfunction App() {\n  const [user] = useAuthState(auth)\n  return (\n    <div className=\"App\">\n      <header>\n        <h1><SignOut/></h1>\n      </header>\n        <section>\n          {user ? <ChatRoom /> :  <SignIn />}\n        </section>\n    \n    </div>\n  );\n}\nfunction SignIn(){\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider()\n    auth.signInWithPopup(provider)\n  }\n  return (\n    <button onClick = {signInWithGoogle}>Sign in with Google</button>\n  )\n}\nfunction SignOut(){\n  return auth.currentUser && (\n    <button onClick = {() => auth.signOut()}>Sign Out</button>\n  )\n}\nfunction ChatRoom(){\n  const dummy = useRef()\n  const messagesRef = firestore.collection('messages')\n  const query = messagesRef.orderBy('createdAt').limit(25)\n  const [messages] = useCollectionData(query, {idField:'id'})\n  const [formValue, setformValue] = useState('')\n  const sendMessage = async(e) => {\n    e.preventDefault()\n    const {uid, photoURL} = auth.currentUser\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    })\n    setformValue('')\n    dummy.current.scrollIntoView({behavior:'smooth'})\n  }\n  return(\n    <div>\n      {messages && messages.map(msg => <ChatMessage key={msg.id} message ={msg}/>)}\n      <div ref={dummy}></div>\n      <form onSubmit={sendMessage}>\n        <input value={formValue} onChange = {(e) => setformValue(e.target.value)}/>\n        <button type = \"submit\">Send</button>\n      </form>\n      \n    </div>\n  )\n\n}\nfunction ChatMessage(props){\n  const {text, uid, photoURL} = props.message \n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'recieved'\n  return(\n    <div className = {`message ${messageClass}`}>\n      <img src = {photoURL} />\n    <p>{text}</p>\n    </div>\n  )\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}