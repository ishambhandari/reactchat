[{"/home/isham/Documents/chatapp/src/index.js":"1","/home/isham/Documents/chatapp/src/reportWebVitals.js":"2","/home/isham/Documents/chatapp/src/App.js":"3"},{"size":500,"mtime":1611422000483,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1611422000483,"results":"6","hashOfConfig":"5"},{"size":2569,"mtime":1611428031822,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"b2ra5k",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"10"},"/home/isham/Documents/chatapp/src/index.js",[],["17","18"],"/home/isham/Documents/chatapp/src/reportWebVitals.js",[],["19","20"],"/home/isham/Documents/chatapp/src/App.js",["21","22"],"import React from 'react'\nimport './App.css';\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/auth'\nimport {useState,useRef} from 'react'\nimport { useAuthState } from 'react-firebase-hooks/auth'\nimport { useCollection, useCollectionData } from 'react-firebase-hooks/firestore' \n\nfirebase.initializeApp ({\n  apiKey: \"AIzaSyAGBegihbcW-4onVY8GrWqSpiE_Of_rAQA\",\n  authDomain: \"chat-app-e0702.firebaseapp.com\",\n  projectId: \"chat-app-e0702\",\n  storageBucket: \"chat-app-e0702.appspot.com\",\n  messagingSenderId: \"234345712159\",\n  appId: \"1:234345712159:web:409264f5d1237e9f23e32a\",\n  measurementId: \"G-81MX26HGFT\"\n\n})\n\nconst auth = firebase.auth()\nconst firestore = firebase.firestore()\n\n\nfunction App() {\n  const [user] = useAuthState(auth)\n  return (\n    <div className=\"App\">\n      <header>\n        <h1><SignOut/></h1>\n      </header>\n        <section>\n          {user ? <ChatRoom /> :  <SignIn />}\n        </section>\n    \n    </div>\n  );\n}\nfunction SignIn(){\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider()\n    auth.signInWithPopup(provider)\n  }\n  return (\n    <button onClick = {signInWithGoogle}>Sign in with Google</button>\n  )\n}\nfunction SignOut(){\n  return auth.currentUser && (\n    <button onClick = {() => auth.signOut()}>Sign Out</button>\n  )\n}\nfunction ChatRoom(){\n  const dummy = useRef()\n  const messagesRef = firestore.collection('messages')\n  const query = messagesRef.orderBy('createdAt').limit(25)\n  const [messages] = useCollectionData(query, {idField:'id'})\n  const [formValue, setformValue] = useState('')\n  const sendMessage = async(e) => {\n    e.preventDefault()\n    const {uid, photoURL} = auth.currentUser\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    })\n    setformValue('')\n    dummy.current.scrollIntoView({behavior:'smooth'})\n  }\n  return(\n    <div>\n      {messages && messages.map(msg => <ChatMessage key={msg.id} message ={msg}/>)}\n      <div ref={dummy}></div>\n      <form onSubmit={sendMessage}>\n        <input value={formValue} onChange = {(e) => setformValue(e.target.value)}/>\n        <button type = \"submit\">Send</button>\n      </form>\n      \n    </div>\n  )\n\n}\nfunction ChatMessage(props){\n  const {text, uid, photoURL} = props.message \n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'recieved'\n  return(\n    <div className = {`message ${messageClass}`}>\n      <img src = {photoURL} />\n    <p>{text}</p>\n    </div>\n  )\n}\nexport default App;\n",{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"23","replacedBy":"27"},{"ruleId":"25","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":8,"column":10,"nodeType":"31","messageId":"32","endLine":8,"endColumn":23},{"ruleId":"33","severity":1,"message":"34","line":89,"column":7,"nodeType":"35","endLine":89,"endColumn":31},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],["36"],["37"],"no-unused-vars","'useCollection' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]